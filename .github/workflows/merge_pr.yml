# This workflow runs for any PR merged into main
name: Deploy to Development
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  pull_request:
    branches:
    - main
    types: [closed]

jobs:
  confirm-merge:
    if: ${{ github.event.pull_request.merged }}
    runs-on: ubuntu-latest
    steps:
      - name: 'Confirm'
        run: echo Just checking PR is merged and not closed
  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [confirm-merge]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@33.2.0

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: |
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
          ls .vercel/output -la
      - name: Deploy Project Artifacts to Vercel
        run: |
          vercel deploy --prebuilt --debug --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt 2>error.txt
          # We need the below code to alias the returned deploymentUrl into our custom dev domain
          code=$?
          if [ $code -eq 0 ]; then
              # Now you can use the deployment url from stdout for the next step of your workflow
              deploymentUrl=`cat deployment-url.txt`
              # Here we actually do the aliasing to our staging url
              vercel alias $deploymentUrl trunkbased-cicd-workflow-staging.vercel.app --scope=${{ secrets.VERCEL_ORG_ID }}
          else
              # Handle the error
              errorMessage=`cat error.txt`
              echo "There was an error: $errorMessage"
          fi
      